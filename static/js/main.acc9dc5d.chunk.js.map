{"version":3,"sources":["components/DataGenerator.js","config/colors.js","components/Heading.js","components/Plot.js","App.js","serviceWorker.js","index.js"],"names":["DataGenerator","iteration","next","data","length","getData","styles","container","height","width","background","colors","margin","paddingLeft","paddingRight","paddingTop","text","fontWeight","color","number","Heading","style","Plot","top","right","bottom","left","xScale","type","min","max","xFormat","e","yScale","yFormat","blendMode","nodeSize","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","legends","motionStiffness","motionDamping","dataGenerator","App","useState","index","setIndex","useEffect","timer","setTimeout","clearTimeout","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"okBAkBeA,EAhBO,WAClB,IAAIC,EAAY,EAEhB,MAAO,CACHC,KAAM,WACED,IAAcE,EAAKC,OAAS,EAC5BH,EAAY,EAEZA,KAERI,QAAS,WACL,MAAO,CAACJ,UAAWA,EAAWE,KAAMA,EAAKF,OCbtC,EACF,UCGPK,EAAS,CACXC,UAAW,CACPC,OAAQ,OACRC,MAAO,QACPC,WAAYC,EACZC,OAAQ,EACRC,YAAa,GACbC,aAAc,GACdC,WAAY,OAEhBC,KAAM,CACFC,WAAY,IACZC,MDbE,WCeNC,OAAQ,CACJD,MDjBG,OCkBHD,WAAY,MAgBLG,EAZC,SAAC,GAAwB,IAAD,IAAtBnB,iBAAsB,MAAV,KAAU,EACpC,OACI,yBAAKoB,MAAOf,EAAOC,WACf,wBAAIc,MAAOf,EAAOU,MAAlB,aACe,IACX,4BAAQK,MAAOf,EAAOa,QAASlB,M,SCzBzCK,EAAS,CACXC,UAAW,CACPC,OAAQ,OACRC,MAAO,QACPC,WAAYC,IA+BLW,EA3BF,SAAC,GAAiB,IAAD,IAAfnB,YAAe,MAAR,GAAQ,EAC1B,OACI,yBAAKkB,MAAOf,EAAOC,WACf,kBAAC,IAAD,CACIJ,KAAMA,EACNS,OAAQ,CAAEW,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDC,OAAQ,CAAEC,KAAM,SAAUC,IAAK,EAAGC,IAAK,IACvCC,QAAS,SAASC,GAAG,OAAOA,GAC5BC,OAAQ,CAAEL,KAAM,SAAUC,IAAK,EAAGC,IAAK,IACvCI,QAAS,SAASF,GAAG,OAAOA,GAC5BG,UAAU,SACVC,SAAU,EACVC,aAAa,EACbC,aAAa,EACbC,QAAS,KACTC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,GACThC,OAAQ,CAAC,WACTiC,gBAAiB,GACjBC,cAAe,OC1BzBC,EAAgB9C,IAuBP+C,EArBH,WAAO,IAAD,EACYC,mBAAS,GADrB,mBACPC,EADO,KACAC,EADA,KAGdC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBP,EAAc5C,OACdgD,EAASD,EAAQ,KAClB,KACH,OAAO,kBAAMK,aAAaF,MAC3B,CAACH,EAAOC,IAEX,IAAM/C,EAAO2C,EAAczC,UAE3B,OACI,yBAAKkD,UAAU,OACX,kBAAC,EAAD,CAAStD,UAAWE,EAAKF,UAAY,IACrC,kBAAC,EAAD,CAAME,KAAMA,EAAKA,SCbTqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.acc9dc5d.chunk.js","sourcesContent":["import data from \"../data/data.json\";\r\n\r\nconst DataGenerator = () => {\r\n    let iteration = 0\r\n\r\n    return {\r\n        next: () => {\r\n            if (iteration === data.length - 1)\r\n                iteration = 0\r\n            else\r\n                iteration++\r\n        },\r\n        getData: () => {\r\n            return {iteration: iteration, data: data[iteration]}\r\n        },\r\n    }\r\n}\r\n\r\nexport default DataGenerator;","export default {\r\n    primary: '#282c34',\r\n    white: '#fff',\r\n    gray: '#d2cfcf',\r\n};","import React from \"react\";\r\nimport colors from \"../config/colors\";\r\n// import LoadingButton from \"./LoadingButton\";\r\n\r\nconst styles = {\r\n    container: {\r\n        height: '15vh',\r\n        width: '100vw',\r\n        background: colors.primary,\r\n        margin: 0,\r\n        paddingLeft: 60,\r\n        paddingRight: 60,\r\n        paddingTop: '5vh',\r\n    },\r\n    text: {\r\n        fontWeight: 400,\r\n        color: colors.gray\r\n    },\r\n    number: {\r\n        color: colors.white,\r\n        fontWeight: 900\r\n    }\r\n}\r\n\r\nconst Heading = ({iteration = null}) => {\r\n    return (\r\n        <div style={styles.container}>\r\n            <h2 style={styles.text}>\r\n                Iteration:{' '}\r\n                <strong style={styles.number}>{iteration}</strong>\r\n                {/*<LoadingButton />*/}\r\n            </h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport {ResponsiveScatterPlot} from \"@nivo/scatterplot\";\r\nimport colors from \"../config/colors\";\r\n\r\nconst styles = {\r\n    container: {\r\n        height: '85vh',\r\n        width: '100vw',\r\n        background: colors.primary\r\n    },\r\n}\r\n\r\nconst Plot = ({data = []}) => {\r\n    return (\r\n        <div style={styles.container}>\r\n            <ResponsiveScatterPlot\r\n                data={data}\r\n                margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                xScale={{ type: 'linear', min: 0, max: 20 }}\r\n                xFormat={function(e){return e}}\r\n                yScale={{ type: 'linear', min: 0, max: 20 }}\r\n                yFormat={function(e){return e}}\r\n                blendMode=\"normal\"\r\n                nodeSize={5}\r\n                enableGridX={false}\r\n                enableGridY={false}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={null}\r\n                axisLeft={null}\r\n                legends={[]}\r\n                colors={['#ffffff']}\r\n                motionStiffness={20}\r\n                motionDamping={20}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Plot;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport DataGenerator from './components/DataGenerator'\nimport Heading from './components/Heading'\nimport Plot from './components/Plot'\n\nconst dataGenerator = DataGenerator()\n\nconst App = () => {\n    const [index, setIndex] = useState(0)\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            dataGenerator.next()\n            setIndex(index + 1)\n        }, 2000)\n        return () => clearTimeout(timer)\n    }, [index, setIndex])\n\n    const data = dataGenerator.getData()\n\n    return (\n        <div className=\"App\">\n            <Heading iteration={data.iteration + 1}/>\n            <Plot data={data.data} />\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}